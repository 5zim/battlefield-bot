import requests
from datetime import datetime
import telebot
import re
from bs4 import BeautifulSoup
from flask import Flask, request
import threading
import schedule
import time
import os
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from webdriver_manager.chrome import ChromeDriverManager
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = os.getenv('TELEGRAM_TOKEN')  # –¢–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è Render
bot = telebot.TeleBot(TOKEN)

# –ß–∞—Ç –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
CHAT_ID = '@SalePixel'  # –¢–≤–æ–π –∫–∞–Ω–∞–ª

# –°–ø–∏—Å–æ–∫ Battlefield –∏–≥—Ä —Å –∏—Ö Steam ID
BATTLEFIELD_GAMES = {
    "Battlefield 1": "1237600",
    "Battlefield V": "1238810",
    "Battlefield 2042": "1517290",
    "Battlefield 4": "1238860",
    "Battlefield 3": "1238820",
    "Battlefield Hardline": "1238880"
}

# Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = Flask(__name__)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–∫–∏–¥–æ–∫
posted_items = set()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Selenium
def setup_driver():
    chrome_options = Options()
    chrome_options.add_argument("--headless")
    chrome_options.add_argument("--no-sandbox")
    chrome_options.add_argument("--disable-dev-shm-usage")
    driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=chrome_options)
    return driver

# Steam: –°–∫–∏–¥–∫–∏ –∏ —Ä–∞–∑–¥–∞—á–∏
def get_steam_battlefield():
    print("–ü—Ä–æ–≤–µ—Ä—è—é Battlefield –≤ Steam...", flush=True)
    discounts = []
    try:
        for game_name, app_id in BATTLEFIELD_GAMES.items():
            url = f"https://store.steampowered.com/api/appdetails?appids={app_id}"
            response = requests.get(url).json()
            if response[app_id]["success"]:
                data = response[app_id]["data"]
                print(f"Steam: {game_name} - {data.get('price_overview', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ü–µ–Ω–µ')}", flush=True)
                if data.get("price_overview", {}).get("discount_percent", 0) > 0:
                    discount = {
                        "id": f"steam_{app_id}",
                        "name": game_name,
                        "discount": data["price_overview"]["discount_percent"],
                        "price": data["price_overview"]["final_formatted"],
                        "url": f"https://store.steampowered.com/app/{app_id}"
                    }
                    discounts.append(discount)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Steam: {e}", flush=True)
    print(f"–ù–∞–π–¥–µ–Ω–æ –≤ Steam: {len(discounts)}", flush=True)
    return discounts

# EA App: –°–∫–∏–¥–∫–∏ –∏ —Ä–∞–∑–¥–∞—á–∏ (—Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Selenium)
def get_ea_battlefield():
    print("–ü—Ä–æ–≤–µ—Ä—è—é Battlefield –≤ EA App —Å –ø–æ–º–æ—â—å—é Selenium...", flush=True)
    discounts = []
    driver = None
    try:
        driver = setup_driver()
        url = "https://www.ea.com/games/battlefield"
        driver.get(url)
        # –ñ–¥—ë–º –∑–∞–≥—Ä—É–∑–∫–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        WebDriverWait(driver, 15).until(
            EC.presence_of_element_located((By.TAG_NAME, "body"))
        )
        # –ü–æ–ª—É—á–∞–µ–º HTML –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è JavaScript
        soup = BeautifulSoup(driver.page_source, 'html.parser')
        # –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å –∏–≥—Ä–∞–º–∏
        game_elements = soup.find_all("div", class_=re.compile(r'game|product|tile|card|ea-play-game|content'))
        print(f"EA: –ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(game_elements)}", flush=True)
        for elem in game_elements:
            title = elem.find("h3") or elem.find("h2") or elem.find("h4") or elem.find("span", class_=re.compile(r'title|name'))
            if title and "Battlefield" in title.text:
                print(f"EA: –ù–∞–π–¥–µ–Ω–∞ –∏–≥—Ä–∞: {title.text}", flush=True)
                discount_elem = elem.find(string=re.compile(r'\d+%\s*off|\d+%\s*discount|sale|deal', re.I))
                if discount_elem:
                    print(f"EA: –ù–∞–π–¥–µ–Ω–∞ —Å–∫–∏–¥–∫–∞: {discount_elem}", flush=True)
                    discount = re.search(r'(\d+)%', discount_elem)
                    if discount:
                        game_link = elem.find("a", href=True)
                        game_url = f"https://www.ea.com{game_link['href']}" if game_link else "https://www.ea.com/games/battlefield"
                        discounts.append({
                            "id": f"ea_{title.text}",
                            "name": title.text,
                            "discount": int(discount.group(1)),
                            "price": "Check on EA App",
                            "url": game_url
                        })
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ EA: {e}", flush=True)
    finally:
        if driver:
            driver.quit()
    print(f"–ù–∞–π–¥–µ–Ω–æ –≤ EA: {len(discounts)}", flush=True)
    return discounts

# Epic Games: –¢–æ–ª—å–∫–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Ä–∞–∑–¥–∞—á–∏
def get_epic_battlefield():
    print("–ü—Ä–æ–≤–µ—Ä—è—é Battlefield –≤ Epic Games...", flush=True)
    discounts = []
    try:
        url = "https://store-site-backend-static-ipv4.ak.epicgames.com/freeGamesPromotions?locale=en-US&country=US&allowCountries=US"
        headers = {
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36"
        }
        response = requests.get(url, headers=headers)
        print(f"Epic: –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}", flush=True)
        data = response.json()
        games = data["data"]["Catalog"]["searchStore"]["elements"]
        print(f"Epic: –ù–∞–π–¥–µ–Ω–æ –∏–≥—Ä: {len(games)}", flush=True)
        for game in games:
            title = game.get("title", "")
            if "Battlefield" in title:
                print(f"Epic: –ù–∞–π–¥–µ–Ω–∞ –∏–≥—Ä–∞: {title}", flush=True)
                price = game["price"]["totalPrice"]["discountPrice"]
                if price == 0:  # –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è —Ä–∞–∑–¥–∞—á–∞
                    product_slug = game.get("productSlug", game.get("urlSlug", ""))
                    discounts.append({
                        "id": f"epic_{game['id']}",
                        "name": title,
                        "discount": 100,  # –ë–µ—Å–ø–ª–∞—Ç–Ω–æ = 100% —Å–∫–∏–¥–∫–∞
                        "price": "Free",
                        "url": f"https://www.epicgames.com/store/en-US/p/{product_slug}"
                    })
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Epic: {e}", flush=True)
    print(f"–ù–∞–π–¥–µ–Ω–æ —Ä–∞–∑–¥–∞—á –≤ Epic: {len(discounts)}", flush=True)
    return discounts

# Prime Gaming: –°–∫–∏–¥–∫–∏ –∏ —Ä–∞–∑–¥–∞—á–∏ (—Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Selenium)
def get_prime_battlefield():
    print("–ü—Ä–æ–≤–µ—Ä—è—é Battlefield –≤ Prime Gaming —Å –ø–æ–º–æ—â—å—é Selenium...", flush=True)
    discounts = []
    driver = None
    try:
        driver = setup_driver()
        url = "https://gaming.amazon.com/home"
        driver.get(url)
        # –ñ–¥—ë–º –∑–∞–≥—Ä—É–∑–∫–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        WebDriverWait(driver, 15).until(
            EC.presence_of_element_located((By.TAG_NAME, "body"))
        )
        # –ü–æ–ª—É—á–∞–µ–º HTML –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è JavaScript
        soup = BeautifulSoup(driver.page_source, 'html.parser')
        # –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å –∏–≥—Ä–∞–º–∏
        game_elements = soup.find_all("div", class_=re.compile(r'item|offer|card|product|game|content'))
        print(f"Prime: –ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(game_elements)}", flush=True)
        for elem in game_elements:
            title = elem.find("h3") or elem.find("h2") or elem.find("h4") or elem.find("span", class_=re.compile(r'title|name'))
            if title and "Battlefield" in title.text:
                print(f"Prime: –ù–∞–π–¥–µ–Ω–∞ –∏–≥—Ä–∞: {title.text}", flush=True)
                free_elem = elem.find(string=re.compile(r'free|claim|gratis|prime', re.I))
                if free_elem:
                    print(f"Prime: –ù–∞–π–¥–µ–Ω–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ free/claim: {free_elem}", flush=True)
                    game_link = elem.find("a", href=True)
                    game_url = game_link['href'] if game_link else "https://gaming.amazon.com/home"
                    if not game_url.startswith("http"):
                        game_url = f"https://gaming.amazon.com{game_url}"
                    discounts.append({
                        "id": f"prime_{title.text}",
                        "name": title.text,
                        "discount": 100,  # –ë–µ—Å–ø–ª–∞—Ç–Ω–æ
                        "price": "Free with Prime",
                        "url": game_url
                    })
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Prime: {e}", flush=True)
    finally:
        if driver:
            driver.quit()
    print(f"–ù–∞–π–¥–µ–Ω–æ –≤ Prime Gaming: {len(discounts)}", flush=True)
    return discounts

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è
def check_battlefield(chat_id):
    print("–ó–∞–ø—É—Å–∫–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É Battlefield...", flush=True)
    all_discounts = (
        get_steam_battlefield() +
        get_ea_battlefield() +
        get_epic_battlefield() +
        get_prime_battlefield()
    )
    if not all_discounts:
        bot.send_message(chat_id, "üîç –ü–æ–∫–∞ Battlefield –æ—Ç–¥—ã—Ö–∞–µ—Ç –æ—Ç —Å–∫–∏–¥–æ–∫ –∏ —Ä–∞–∑–¥–∞—á. –°–æ–ª–¥–∞—Ç—ã, –≥–æ—Ç–æ–≤—å—Ç–µ –∫–æ—à–µ–ª—å–∫–∏ ‚Äî –∂–¥—ë–º —Å–ª–µ–¥—É—é—â—É—é –∞—Ç–∞–∫—É –∞–∫—Ü–∏–π!")
        print("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Å–∫–∏–¥–æ–∫", flush=True)
    else:
        for item in all_discounts:
            item_id = item["id"]
            if item_id not in posted_items:
                message = (
                    f"üéÆ {item['name']}\n"
                    f"üî• –°–∫–∏–¥–∫–∞: {item['discount']}%\n"
                    f"üí∞ –¶–µ–Ω–∞: {item['price']}\n"
                    f"üîó [–ö—É–ø–∏—Ç—å]({item['url']})"
                )
                bot.send_message(chat_id, message, parse_mode="Markdown", disable_web_page_preview=True)
                posted_items.add(item_id)
                print(f"–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {item['name']}", flush=True)

# –ö–æ—Ä–Ω–µ–≤–æ–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Render
@app.route('/', methods=['GET'])
def home():
    print("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞", flush=True)
    return "Bot is alive. Use /check in Telegram to trigger.", 200

# –û–±—Ä–∞–±–æ—Ç–∫–∞ webhook-–∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç Telegram
@app.route('/webhook', methods=['POST'])
def webhook():
    print("–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ /webhook", flush=True)
    try:
        data = request.get_json()
        if not data:
            print("–û—à–∏–±–∫–∞: –ü—É—Å—Ç–æ–π JSON", flush=True)
            return 'Bad Request', 400
        print(f"–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {data}", flush=True)
        update = telebot.types.Update.de_json(data)
        if not update:
            print("–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å Update", flush=True)
            return 'Bad Request', 400

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –≥—Ä—É–ø–ø
        if update.message:
            print(f"–°–æ–æ–±—â–µ–Ω–∏–µ: {update.message.text}, Chat ID: {update.message.chat.id}, Message ID: {update.message.message_id}", flush=True)
            if update.message.text == '/check':
                chat_id = '@SalePixel'
                threading.Thread(target=check_battlefield, args=(chat_id,), daemon=True).start()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –∫–∞–Ω–∞–ª–æ–≤
        elif update.channel_post:
            print(f"–°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞: {update.channel_post.text}, Chat ID: {update.channel_post.chat.id}", flush=True)
            if update.channel_post.text == '/check':
                chat_id = '@SalePixel'
                threading.Thread(target=check_battlefield, args=(chat_id,), daemon=True).start()

        return 'OK', 200
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ webhook: {e}", flush=True)
        return 'Error', 500

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
def set_webhook():
    webhook_url = 'https://battlefield-bot.onrender.com/webhook'
    try:
        bot.remove_webhook()
        bot.set_webhook(url=webhook_url)
        print(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}", flush=True)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {e}", flush=True)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
def run_schedule():
    while True:
        schedule.run_pending()
        time.sleep(60)

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!", flush=True)
    schedule.every().day.at("12:00").do(check_battlefield, chat_id='@SalePixel')  # –ï–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 12:00 UTC
    threading.Thread(target=run_schedule, daemon=True).start()
    set_webhook()
    port = int(os.getenv('PORT', 8000))
    app.run(host='0.0.0.0', port=port)
